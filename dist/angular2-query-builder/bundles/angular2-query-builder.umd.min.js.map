{"version":3,"sources":["ng://angular2-query-builder/lib/query-builder/query-operator.directive.ts","ng://angular2-query-builder/lib/query-builder/query-field.directive.ts","ng://angular2-query-builder/lib/query-builder/query-entity.directive.ts","ng://angular2-query-builder/lib/query-builder/query-switch-group.directive.ts","ng://angular2-query-builder/lib/query-builder/query-button-group.directive.ts","ng://angular2-query-builder/lib/query-builder/query-input.directive.ts","ng://angular2-query-builder/lib/query-builder/query-remove-button.directive.ts","ng://angular2-query-builder/lib/query-builder/query-empty-warning.directive.ts","ng://angular2-query-builder/lib/query-builder/query-arrow-icon.directive.ts","ng://angular2-query-builder/lib/query-builder/query-builder.component.html","ng://angular2-query-builder/lib/query-builder/query-builder.component.ts","ng://angular2-query-builder/lib/angular2-query-builder.module.ts"],"names":["QueryOperatorDirective","template","this","core","TemplateRef","selectors","QueryFieldDirective","QueryEntityDirective","QuerySwitchGroupDirective","QueryButtonGroupDirective","QueryInputDirective","Object","defineProperty","prototype","_type","value","inputs","queryInputType","QueryRemoveButtonDirective","QueryEmptyWarningDirective","QueryArrowIconDirective","i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵelementContainer","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","i0.ɵɵadvance","ctx_r171","getArrowIconContext","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelementEnd","_r160","ctx_r163","getButtonGroupContext","i0.ɵɵtext","ctx_r178","disabled","ctx_r179","ctx_r165","ctx_r166","getSwitchGroupContext","ctx_r188","data","condition","ctx_r206","getRemoveButtonContext","rule_r197","ctx_r208","ctx_r227","getEntityContext","_r210","i0.ɵɵtextInterpolate1","$event","_r235","ctx_r237","$implicit","i_r198","index","ctx_r236","changeEntity","entity","ctx_r211","ctx_r212","getFieldContext","_r246","changeField","field","ctx_r214","ctx_r215","getOperatorContext","_r257","changeOperator","operator","ctx_r217","ctx_r218","getInputContext","_r273","changeInput","ctx_r264","_r278","ctx_r265","_r283","ctx_r266","_r288","ctx_r267","_r295","ctx_r268","_r302","ctx_r269","_r307","ctx_r270","ctx_r220","getInputType","_r207","_r213","_r216","_r219","ctx_r202","parentTouchedCallback","onTouchedCallback","parentChangeCallback","onChangeCallback","parentInputTemplates","inputTemplates","parentOperatorTemplate","operatorTemplate","parentFieldTemplate","fieldTemplate","parentEntityTemplate","entityTemplate","parentSwitchGroupTemplate","switchGroupTemplate","parentButtonGroupTemplate","buttonGroupTemplate","parentRemoveButtonTemplate","removeButtonTemplate","parentEmptyWarningTemplate","emptyWarningTemplate","parentArrowIconTemplate","arrowIconTemplate","classNames","config","allowRuleset","allowCollapse","emptyMessage","operatorMap","ctx_r314","getEmptyWarningContext","_r204","CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","QueryBuilderComponent","multi","VALIDATOR","NG_VALIDATORS","changeDetectorRef","_this","defaultClassNames","arrowIconButton","arrowIcon","removeIcon","addIcon","button","buttonGroup","removeButton","switchGroup","switchLabel","switchRadio","rightAlign","transition","collapsed","treeContainer","tree","row","connector","rule","ruleSet","invalidRuleSet","emptyWarning","fieldControl","fieldControlSize","entityControl","entityControlSize","operatorControl","operatorControlSize","inputControl","inputControlSize","defaultOperatorMap","string","number","time","date","category","boolean","rules","fields","persistValueOnFieldChange","defaultTemplateTypes","defaultPersistValueTypes","defaultEmptyList","inputContextCache","Map","operatorContextCache","fieldContextCache","entityContextCache","removeButtonContextCache","getDisabledState","ngOnInit","ngOnChanges","changes","type","Error","keys","map","entities","operatorsCache","validate","control","errors","ruleErrorStore","hasErrors","allowEmptyRulesets","checkEmptyRuleInRuleset","empty","validateRulesInRuleset","length","handleDataChange","writeValue","obj","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","detectChanges","findTemplateForRule","queryInput","findQueryInput","indexOf","console","warn","find","item","getOperators","operators","fieldObject","nullable","concat","getFields","filter","getOptions","options","getClassNames","args","_i","arguments","clsLookup","id","c","join","getDefaultField","undefined","defaultField","getDefaultValue","entityFields","name","getDefaultOperator","defaultOperator","addRule","parent","defaultValue","handleTouched","removeRule","r","delete","addRuleSet","removeRuleSet","ruleset","parentValue","transitionEnd","e","nativeElement","style","maxHeight","toggleCollapse","computedTreeContainerHeight","setTimeout","firstElementChild","clientHeight","changeCondition","coerceValueForOperator","Array","isArray","fieldValue","inputContext","get","currentField","nextField","nextValue","calculateFieldChangeValue","entityValue","i","rs","findIndex","x","getOperatorTemplate","t","getFieldTemplate","getEntityTemplate","getArrowIconTemplate","getButtonGroupTemplate","getSwitchGroupTemplate","getRemoveButtonTemplate","getEmptyWarningTemplate","getQueryItemClassName","local","cls","invalid","buttonGroupContext","bind","has","set","onChange","message","currentValue","some","errorStore","forEach","validator","apply","error","push","markForCheck","ChangeDetectorRef","contentQueries","rf","ctx","dirIndex","decls","vars","consts","_r164","_r167","styles","QueryBuilderModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[queryOperator]'})\r\nexport class QueryOperatorDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[queryField]'})\r\nexport class QueryFieldDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[queryEntity]'})\r\nexport class QueryEntityDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[querySwitchGroup]'})\r\nexport class QuerySwitchGroupDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[queryButtonGroup]'})\r\nexport class QueryButtonGroupDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, Input, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[queryInput]'})\r\nexport class QueryInputDirective {\r\n  /** Unique name for query input type. */\r\n  @Input()\r\n  get queryInputType(): string { return this._type; }\r\n  set queryInputType(value: string) {\r\n    // If the directive is set without a type (updated programatically), then this setter will\r\n    // trigger with an empty string and should not overwrite the programatically set value.\r\n    if (!value) { return; }\r\n    this._type = value;\r\n  }\r\n  private _type: string;\r\n\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[queryRemoveButton]'})\r\nexport class QueryRemoveButtonDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[queryEmptyWarning]'})\r\nexport class QueryEmptyWarningDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({selector: '[queryArrowIcon]'})\r\nexport class QueryArrowIconDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","<div [ngClass]=\"getClassNames('switchRow')\">\r\n  <ng-template #defaultArrowIcon>\r\n    <i [ngClass]=\"getClassNames('arrowIcon')\"></i>\r\n  </ng-template>\r\n\r\n  <a *ngIf=\"allowCollapse\" (click)=\"toggleCollapse()\" [ngClass]=\"getClassNames('arrowIconButton', data.collapsed ? 'collapsed' : null)\">\r\n    <ng-container *ngIf=\"getArrowIconTemplate() as template; else defaultArrowIcon\">\r\n      <ng-container *ngTemplateOutlet=\"template; context: getArrowIconContext()\"></ng-container>\r\n    </ng-container>\r\n  </a>\r\n\r\n  <ng-container *ngIf=\"getButtonGroupTemplate() as template; else defaultButtonGroup\">\r\n    <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\r\n      <ng-container *ngTemplateOutlet=\"template; context: getButtonGroupContext()\"></ng-container>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-template #defaultButtonGroup>\r\n    <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\r\n      <button type=\"button\" (click)=\"addRule()\" [ngClass]=\"getClassNames('button')\" [disabled]=disabled>\r\n        <i [ngClass]=\"getClassNames('addIcon')\"></i> Rule\r\n      </button>\r\n      <button type=\"button\" (click)=\"addRuleSet()\" [ngClass]=\"getClassNames('button')\" *ngIf=\"allowRuleset\" [disabled]=disabled>\r\n        <i [ngClass]=\"getClassNames('addIcon')\"></i> Ruleset\r\n      </button>\r\n      <ng-container *ngIf=\"!!parentValue && allowRuleset\">\r\n        <button type=\"button\" (click)=\"removeRuleSet()\" [ngClass]=\"getClassNames('button', 'removeButton')\" [disabled]=disabled>\r\n          <i [ngClass]=\"getClassNames('removeIcon')\"></i>\r\n        </button>\r\n      </ng-container>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-container *ngIf=\"getSwitchGroupTemplate() as template; else defaultSwitchGroup\">\r\n    <ng-container *ngTemplateOutlet=\"template; context: getSwitchGroupContext()\"></ng-container>\r\n  </ng-container>\r\n\r\n  <ng-template #defaultSwitchGroup>\r\n    <div [ngClass]=\"getClassNames('switchGroup', 'transition')\" *ngIf=\"data\">\r\n      <div [ngClass]=\"getClassNames('switchControl')\">\r\n        <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"data.condition\" [disabled]=disabled\r\n          value=\"and\" #andOption />\r\n        <label (click)=\"changeCondition(andOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">AND</label>\r\n      </div>\r\n      <div [ngClass]=\"getClassNames('switchControl')\">\r\n        <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"data.condition\" [disabled]=disabled\r\n          value=\"or\" #orOption />\r\n        <label (click)=\"changeCondition(orOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">OR</label>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n\r\n<div #treeContainer (transitionend)=\"transitionEnd($event)\" [ngClass]=\"getClassNames('treeContainer', data.collapsed ? 'collapsed' : null)\">\r\n  <ul [ngClass]=\"getClassNames('tree')\" *ngIf=\"data && data.rules\">\r\n    <ng-container *ngFor=\"let rule of data.rules;let i=index\">\r\n\r\n      <ng-container *ngIf=\"{ruleset: !!rule.rules, invalid: !config.allowEmptyRulesets && rule.rules && rule.rules.length === 0} as local\">\r\n        <li [ngClass]=\"getQueryItemClassName(local)\">\r\n          <ng-container *ngIf=\"!local.ruleset\">\r\n\r\n            <ng-container *ngIf=\"getRemoveButtonTemplate() as template; else defaultRemoveButton\">\r\n              <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\r\n                <ng-container *ngTemplateOutlet=\"template; context: getRemoveButtonContext(rule)\"></ng-container>\r\n              </div>\r\n            </ng-container>\r\n\r\n            <ng-template #defaultRemoveButton>\r\n              <div [ngClass]=\"getClassNames('removeButtonSize', 'rightAlign')\">\r\n                <button type=\"button\" [ngClass]=\"getClassNames('button', 'removeButton')\" (click)=\"removeRule(rule, data)\" [disabled]=disabled>\r\n                  <i [ngClass]=\"getClassNames('removeIcon')\"></i>\r\n                </button>\r\n              </div>\r\n            </ng-template>\r\n\r\n            <div *ngIf=\"entities?.length > 0\" class=\"q-inline-block-display\">\r\n              <ng-container *ngIf=\"getEntityTemplate() as template; else defaultEntity\">\r\n                <ng-container *ngTemplateOutlet=\"template; context: getEntityContext(rule)\"></ng-container>\r\n              </ng-container>\r\n            </div>\r\n\r\n            <ng-template #defaultEntity>\r\n              <div [ngClass]=\"getClassNames('entityControlSize')\">\r\n                <select [ngClass]=\"getClassNames('entityControl')\" [(ngModel)]=\"rule.entity\" (ngModelChange)=\"changeEntity($event, rule,i,data)\"\r\n                  [disabled]=\"disabled\">\r\n                  <option *ngFor=\"let entity of entities\" [ngValue]=\"entity.value\">\r\n                    {{entity.name}}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </ng-template>\r\n\r\n            <ng-container *ngIf=\"getFieldTemplate() as template; else defaultField\">\r\n              <ng-container *ngTemplateOutlet=\"template; context: getFieldContext(rule)\"></ng-container>\r\n            </ng-container>\r\n\r\n            <ng-template #defaultField>\r\n              <div [ngClass]=\"getClassNames('fieldControlSize')\">\r\n                <select [ngClass]=\"getClassNames('fieldControl')\" [(ngModel)]=\"rule.field\" (ngModelChange)=\"changeField($event, rule)\"\r\n                  [disabled]=\"disabled\">\r\n                  <option *ngFor=\"let field of getFields(rule.entity)\" [ngValue]=\"field.value\">\r\n                    {{field.name}}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </ng-template>\r\n\r\n            <ng-container *ngIf=\"getOperatorTemplate() as template; else defaultOperator\">\r\n              <ng-container *ngTemplateOutlet=\"template; context: getOperatorContext(rule)\"></ng-container>\r\n            </ng-container>\r\n\r\n            <ng-template #defaultOperator>\r\n              <div [ngClass]=\"getClassNames('operatorControlSize')\">\r\n                <select [ngClass]=\"getClassNames('operatorControl')\" [(ngModel)]=\"rule.operator\" (ngModelChange)=\"changeOperator(rule)\"\r\n                  [disabled]=\"disabled\">\r\n                  <option *ngFor=\"let operator of getOperators(rule.field)\" [ngValue]=\"operator\">\r\n                    {{operator}}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </ng-template>\r\n\r\n            <ng-container *ngIf=\"findTemplateForRule(rule) as template; else defaultInput\">\r\n              <ng-container *ngTemplateOutlet=\"template; context: getInputContext(rule)\"></ng-container>\r\n            </ng-container>\r\n\r\n            <ng-template #defaultInput>\r\n              <div [ngClass]=\"getClassNames('inputControlSize')\" [ngSwitch]=\"getInputType(rule.field, rule.operator)\">\r\n                <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\"\r\n                  [disabled]=\"disabled\" *ngSwitchCase=\"'string'\" type=\"text\">\r\n                <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\"\r\n                  [disabled]=\"disabled\" *ngSwitchCase=\"'number'\" type=\"number\">\r\n                <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\"\r\n                  [disabled]=\"disabled\" *ngSwitchCase=\"'date'\" type=\"date\">\r\n                <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\"\r\n                  [disabled]=\"disabled\" *ngSwitchCase=\"'time'\" type=\"time\">\r\n                <select [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\"\r\n                  [disabled]=\"disabled\" *ngSwitchCase=\"'category'\">\r\n                  <option *ngFor=\"let opt of getOptions(rule.field)\" [ngValue]=\"opt.value\">\r\n                    {{opt.name}}\r\n                  </option>\r\n                </select>\r\n                <ng-container *ngSwitchCase=\"'multiselect'\">\r\n                  <select [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\"\r\n                    [disabled]=\"disabled\" multiple>\r\n                    <option *ngFor=\"let opt of getOptions(rule.field)\" [ngValue]=\"opt.value\">\r\n                      {{opt.name}}\r\n                    </option>\r\n                  </select>\r\n                </ng-container>\r\n                <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\"\r\n                  [disabled]=\"disabled\" *ngSwitchCase=\"'boolean'\" type=\"checkbox\">\r\n              </div>\r\n            </ng-template>\r\n\r\n          </ng-container>\r\n          <query-builder *ngIf=\"local.ruleset\" [data]=\"rule\" [disabled]=\"disabled\" [parentTouchedCallback]=\"parentTouchedCallback || onTouchedCallback\"\r\n            [parentChangeCallback]=\"parentChangeCallback || onChangeCallback\" [parentInputTemplates]=\"parentInputTemplates || inputTemplates\"\r\n            [parentOperatorTemplate]=\"parentOperatorTemplate || operatorTemplate\" [parentFieldTemplate]=\"parentFieldTemplate || fieldTemplate\"\r\n            [parentEntityTemplate]=\"parentEntityTemplate || entityTemplate\" [parentSwitchGroupTemplate]=\"parentSwitchGroupTemplate || switchGroupTemplate\"\r\n            [parentButtonGroupTemplate]=\"parentButtonGroupTemplate || buttonGroupTemplate\" [parentRemoveButtonTemplate]=\"parentRemoveButtonTemplate || removeButtonTemplate\"\r\n            [parentEmptyWarningTemplate]=\"parentEmptyWarningTemplate || emptyWarningTemplate\" [parentArrowIconTemplate]=\"parentArrowIconTemplate || arrowIconTemplate\"\r\n            [parentValue]=\"data\" [classNames]=\"classNames\" [config]=\"config\" [allowRuleset]=\"allowRuleset\"\r\n            [allowCollapse]=\"allowCollapse\" [emptyMessage]=\"emptyMessage\" [operatorMap]=\"operatorMap\">\r\n          </query-builder>\r\n\r\n          <ng-container *ngIf=\"getEmptyWarningTemplate() as template; else defaultEmptyWarning\">\r\n            <ng-container *ngIf=\"local.invalid\">\r\n              <ng-container *ngTemplateOutlet=\"template; context: getEmptyWarningContext()\"></ng-container>\r\n            </ng-container>\r\n          </ng-container>\r\n\r\n          <ng-template #defaultEmptyWarning>\r\n            <p [ngClass]=\"getClassNames('emptyWarning')\" *ngIf=\"local.invalid\">\r\n              {{emptyMessage}}\r\n            </p>\r\n          </ng-template>\r\n        </li>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ul>\r\n</div>","import {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALUE_ACCESSOR,\r\n  NG_VALIDATORS,\r\n  ValidationErrors,\r\n  Validator\r\n} from '@angular/forms';\r\nimport { QueryOperatorDirective } from './query-operator.directive';\r\nimport { QueryFieldDirective } from './query-field.directive';\r\nimport { QueryEntityDirective } from './query-entity.directive';\r\nimport { QuerySwitchGroupDirective } from './query-switch-group.directive';\r\nimport { QueryButtonGroupDirective } from './query-button-group.directive';\r\nimport { QueryInputDirective } from './query-input.directive';\r\nimport { QueryRemoveButtonDirective } from './query-remove-button.directive';\r\nimport { QueryEmptyWarningDirective } from './query-empty-warning.directive';\r\nimport { QueryArrowIconDirective } from './query-arrow-icon.directive';\r\nimport {\r\n  ButtonGroupContext,\r\n  Entity,\r\n  Field,\r\n  SwitchGroupContext,\r\n  EntityContext,\r\n  FieldContext,\r\n  InputContext,\r\n  LocalRuleMeta,\r\n  OperatorContext,\r\n  Option,\r\n  QueryBuilderClassNames,\r\n  QueryBuilderConfig,\r\n  RemoveButtonContext,\r\n  ArrowIconContext,\r\n  Rule,\r\n  RuleSet,\r\n  EmptyWarningContext,\r\n} from './query-builder.interfaces';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  QueryList,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\n\r\nexport const CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => QueryBuilderComponent),\r\n  multi: true\r\n};\r\n\r\nexport const VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => QueryBuilderComponent),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'query-builder',\r\n  templateUrl: './query-builder.component.html',\r\n  styleUrls: ['./query-builder.component.scss'],\r\n  providers: [CONTROL_VALUE_ACCESSOR, VALIDATOR]\r\n})\r\nexport class QueryBuilderComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\r\n  public fields: Field[];\r\n  public filterFields: Field[];\r\n  public entities: Entity[];\r\n  public defaultClassNames: QueryBuilderClassNames = {\r\n    arrowIconButton: 'q-arrow-icon-button',\r\n    arrowIcon: 'q-icon q-arrow-icon',\r\n    removeIcon: 'q-icon q-remove-icon',\r\n    addIcon: 'q-icon q-add-icon',\r\n    button: 'q-button',\r\n    buttonGroup: 'q-button-group',\r\n    removeButton: 'q-remove-button',\r\n    switchGroup: 'q-switch-group',\r\n    switchLabel: 'q-switch-label',\r\n    switchRadio: 'q-switch-radio',\r\n    rightAlign: 'q-right-align',\r\n    transition: 'q-transition',\r\n    collapsed: 'q-collapsed',\r\n    treeContainer: 'q-tree-container',\r\n    tree: 'q-tree',\r\n    row: 'q-row',\r\n    connector: 'q-connector',\r\n    rule: 'q-rule',\r\n    ruleSet: 'q-ruleset',\r\n    invalidRuleSet: 'q-invalid-ruleset',\r\n    emptyWarning: 'q-empty-warning',\r\n    fieldControl: 'q-field-control',\r\n    fieldControlSize: 'q-control-size',\r\n    entityControl: 'q-entity-control',\r\n    entityControlSize: 'q-control-size',\r\n    operatorControl: 'q-operator-control',\r\n    operatorControlSize: 'q-control-size',\r\n    inputControl: 'q-input-control',\r\n    inputControlSize: 'q-control-size'\r\n  };\r\n  public defaultOperatorMap: { [key: string]: string[] } = {\r\n    string: ['=', '!=', 'contains', 'like'],\r\n    number: ['=', '!=', '>', '>=', '<', '<='],\r\n    time: ['=', '!=', '>', '>=', '<', '<='],\r\n    date: ['=', '!=', '>', '>=', '<', '<='],\r\n    category: ['=', '!=', 'in', 'not in'],\r\n    boolean: ['=']\r\n  };\r\n  @Input() disabled: boolean;\r\n  @Input() data: RuleSet = { condition: 'and', rules: [] };\r\n\r\n  // For ControlValueAccessor interface\r\n  public onChangeCallback: () => void;\r\n  public onTouchedCallback: () => any;\r\n\r\n  @Input() allowRuleset: boolean = true;\r\n  @Input() allowCollapse: boolean = false;\r\n  @Input() emptyMessage: string = 'A ruleset cannot be empty. Please add a rule or remove it all together.';\r\n  @Input() classNames: QueryBuilderClassNames;\r\n  @Input() operatorMap: { [key: string]: string[] };\r\n  @Input() parentValue: RuleSet;\r\n  @Input() config: QueryBuilderConfig = { fields: {} };\r\n  @Input() parentArrowIconTemplate: QueryArrowIconDirective;\r\n  @Input() parentInputTemplates: QueryList<QueryInputDirective>;\r\n  @Input() parentOperatorTemplate: QueryOperatorDirective;\r\n  @Input() parentFieldTemplate: QueryFieldDirective;\r\n  @Input() parentEntityTemplate: QueryEntityDirective;\r\n  @Input() parentSwitchGroupTemplate: QuerySwitchGroupDirective;\r\n  @Input() parentButtonGroupTemplate: QueryButtonGroupDirective;\r\n  @Input() parentRemoveButtonTemplate: QueryRemoveButtonDirective;\r\n  @Input() parentEmptyWarningTemplate: QueryEmptyWarningDirective;\r\n  @Input() parentChangeCallback: () => void;\r\n  @Input() parentTouchedCallback: () => void;\r\n  @Input() persistValueOnFieldChange: boolean = false;\r\n\r\n  @ViewChild('treeContainer', {static: true}) treeContainer: ElementRef;\r\n\r\n  @ContentChild(QueryButtonGroupDirective) buttonGroupTemplate: QueryButtonGroupDirective;\r\n  @ContentChild(QuerySwitchGroupDirective) switchGroupTemplate: QuerySwitchGroupDirective;\r\n  @ContentChild(QueryFieldDirective) fieldTemplate: QueryFieldDirective;\r\n  @ContentChild(QueryEntityDirective) entityTemplate: QueryEntityDirective;\r\n  @ContentChild(QueryOperatorDirective) operatorTemplate: QueryOperatorDirective;\r\n  @ContentChild(QueryRemoveButtonDirective) removeButtonTemplate: QueryRemoveButtonDirective;\r\n  @ContentChild(QueryEmptyWarningDirective) emptyWarningTemplate: QueryEmptyWarningDirective;\r\n  @ContentChildren(QueryInputDirective) inputTemplates: QueryList<QueryInputDirective>;\r\n  @ContentChild(QueryArrowIconDirective) arrowIconTemplate: QueryArrowIconDirective;\r\n\r\n  private defaultTemplateTypes: string[] = [\r\n    'string', 'number', 'time', 'date', 'category', 'boolean', 'multiselect'];\r\n  private defaultPersistValueTypes: string[] = [\r\n    'string', 'number', 'time', 'date', 'boolean'];\r\n  private defaultEmptyList: any[] = [];\r\n  private operatorsCache: { [key: string]: string[] };\r\n  private inputContextCache = new Map<Rule, InputContext>();\r\n  private operatorContextCache = new Map<Rule, OperatorContext>();\r\n  private fieldContextCache = new Map<Rule, FieldContext>();\r\n  private entityContextCache = new Map<Rule, EntityContext>();\r\n  private removeButtonContextCache = new Map<Rule, RemoveButtonContext>();\r\n  private buttonGroupContext: ButtonGroupContext;\r\n\r\n  constructor(private changeDetectorRef: ChangeDetectorRef) { }\r\n\r\n  // ----------OnInit Implementation----------\r\n\r\n  ngOnInit() { }\r\n\r\n  // ----------OnChanges Implementation----------\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const config = this.config;\r\n    const type = typeof config;\r\n    if (type === 'object') {\r\n      this.fields = Object.keys(config.fields).map((value) => {\r\n        const field = config.fields[value];\r\n        field.value = field.value || value;\r\n        return field;\r\n      });\r\n      if (config.entities) {\r\n        this.entities = Object.keys(config.entities).map((value) => {\r\n          const entity = config.entities[value];\r\n          entity.value = entity.value || value;\r\n          return entity;\r\n        });\r\n      } else {\r\n        this.entities = null;\r\n      }\r\n      this.operatorsCache = {};\r\n    } else {\r\n      throw new Error(`Expected 'config' must be a valid object, got ${type} instead.`);\r\n    }\r\n  }\r\n\r\n  // ----------Validator Implementation----------\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    const errors: { [key: string]: any } = {};\r\n    const ruleErrorStore = [];\r\n    let hasErrors = false;\r\n\r\n    if (!this.config.allowEmptyRulesets && this.checkEmptyRuleInRuleset(this.data)) {\r\n      errors.empty = 'Empty rulesets are not allowed.';\r\n      hasErrors = true;\r\n    }\r\n\r\n    this.validateRulesInRuleset(this.data, ruleErrorStore);\r\n\r\n    if (ruleErrorStore.length) {\r\n      errors.rules = ruleErrorStore;\r\n      hasErrors = true;\r\n    }\r\n    return hasErrors ? errors : null;\r\n  }\r\n\r\n  // ----------ControlValueAccessor Implementation----------\r\n\r\n  @Input()\r\n  get value(): RuleSet {\r\n    return this.data;\r\n  }\r\n  set value(value: RuleSet) {\r\n    // When component is initialized without a formControl, null is passed to value\r\n    this.data = value || { condition: 'and', rules: [] };\r\n    this.handleDataChange();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this.value = obj;\r\n  }\r\n  registerOnChange(fn: any): void {\r\n    this.onChangeCallback = () => fn(this.data);\r\n  }\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouchedCallback = () => fn(this.data);\r\n  }\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  // ----------END----------\r\n\r\n  getDisabledState = (): boolean => {\r\n    return this.disabled;\r\n  }\r\n\r\n  findTemplateForRule(rule: Rule): TemplateRef<any> {\r\n    const type = this.getInputType(rule.field, rule.operator);\r\n    if (type) {\r\n      const queryInput = this.findQueryInput(type);\r\n      if (queryInput) {\r\n        return queryInput.template;\r\n      } else {\r\n        if (this.defaultTemplateTypes.indexOf(type) === -1) {\r\n          console.warn(`Could not find template for field with type: ${type}`);\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  findQueryInput(type: string): QueryInputDirective {\r\n    const templates = this.parentInputTemplates || this.inputTemplates;\r\n    return templates.find((item) => item.queryInputType === type);\r\n  }\r\n\r\n  getOperators(field: string): string[] {\r\n    if (this.operatorsCache[field]) {\r\n      return this.operatorsCache[field];\r\n    }\r\n    let operators = this.defaultEmptyList;\r\n    const fieldObject = this.config.fields[field];\r\n\r\n    if (this.config.getOperators) {\r\n      return this.config.getOperators(field, fieldObject);\r\n    }\r\n\r\n    const type = fieldObject.type;\r\n\r\n    if (fieldObject && fieldObject.operators) {\r\n      operators = fieldObject.operators;\r\n    } else if (type) {\r\n      operators = (this.operatorMap && this.operatorMap[type]) || this.defaultOperatorMap[type] || this.defaultEmptyList;\r\n      if (operators.length === 0) {\r\n        console.warn(\r\n          `No operators found for field '${field}' with type ${fieldObject.type}. ` +\r\n          `Please define an 'operators' property on the field or use the 'operatorMap' binding to fix this.`);\r\n      }\r\n      if (fieldObject.nullable) {\r\n        operators = operators.concat(['is null', 'is not null']);\r\n      }\r\n    } else {\r\n      console.warn(`No 'type' property found on field: '${field}'`);\r\n    }\r\n\r\n    // Cache reference to array object, so it won't be computed next time and trigger a rerender.\r\n    this.operatorsCache[field] = operators;\r\n    return operators;\r\n  }\r\n\r\n  getFields(entity: string): Field[] {\r\n    if (this.entities && entity) {\r\n      return this.fields.filter((field) => {\r\n        return field && field.entity === entity;\r\n      });\r\n    } else {\r\n      return this.fields;\r\n    }\r\n  }\r\n\r\n  getInputType(field: string, operator: string): string {\r\n    if (this.config.getInputType) {\r\n      return this.config.getInputType(field, operator);\r\n    }\r\n\r\n    if (!this.config.fields[field]) {\r\n      throw new Error(`No configuration for field '${field}' could be found! Please add it to config.fields.`);\r\n    }\r\n\r\n    const type = this.config.fields[field].type;\r\n    switch (operator) {\r\n      case 'is null':\r\n      case 'is not null':\r\n        return null;  // No displayed component\r\n      case 'in':\r\n      case 'not in':\r\n        return type === 'category' || type === 'boolean' ? 'multiselect' : type;\r\n      default:\r\n        return type;\r\n    }\r\n  }\r\n\r\n  getOptions(field: string): Option[] {\r\n    if (this.config.getOptions) {\r\n      return this.config.getOptions(field);\r\n    }\r\n    return this.config.fields[field].options || this.defaultEmptyList;\r\n  }\r\n\r\n  getClassNames(...args): string {\r\n    const clsLookup = this.classNames ? this.classNames : this.defaultClassNames;\r\n    const classNames = args.map((id) => clsLookup[id] || this.defaultClassNames[id]).filter((c) => !!c);\r\n    return classNames.length ? classNames.join(' ') : null;\r\n  }\r\n\r\n  getDefaultField(entity: Entity): Field {\r\n    if (!entity) {\r\n      return null;\r\n    } else if (entity.defaultField !== undefined) {\r\n      return this.getDefaultValue(entity.defaultField);\r\n    } else {\r\n      const entityFields = this.fields.filter((field) => {\r\n        return field && field.entity === entity.value;\r\n      });\r\n      if (entityFields && entityFields.length) {\r\n        return entityFields[0];\r\n      } else {\r\n        console.warn(`No fields found for entity '${entity.name}'. ` +\r\n          `A 'defaultOperator' is also not specified on the field config. Operator value will default to null.`);\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  getDefaultOperator(field: Field): string {\r\n    if (field && field.defaultOperator !== undefined) {\r\n      return this.getDefaultValue(field.defaultOperator);\r\n    } else {\r\n      const operators = this.getOperators(field.value);\r\n      if (operators && operators.length) {\r\n        return operators[0];\r\n      } else {\r\n        console.warn(`No operators found for field '${field.value}'. ` +\r\n          `A 'defaultOperator' is also not specified on the field config. Operator value will default to null.`);\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  addRule(parent?: RuleSet): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    parent = parent || this.data;\r\n    if (this.config.addRule) {\r\n      this.config.addRule(parent);\r\n    } else {\r\n      const field = this.fields[0];\r\n      parent.rules = parent.rules.concat([{\r\n        field: field.value,\r\n        operator: this.getDefaultOperator(field),\r\n        value: this.getDefaultValue(field.defaultValue),\r\n        entity: field.entity\r\n      }]);\r\n    }\r\n\r\n    this.handleTouched();\r\n    this.handleDataChange();\r\n  }\r\n\r\n  removeRule(rule: Rule, parent?: RuleSet): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    parent = parent || this.data;\r\n    if (this.config.removeRule) {\r\n      this.config.removeRule(rule, parent);\r\n    } else {\r\n      parent.rules = parent.rules.filter((r) => r !== rule);\r\n    }\r\n    this.inputContextCache.delete(rule);\r\n    this.operatorContextCache.delete(rule);\r\n    this.fieldContextCache.delete(rule);\r\n    this.entityContextCache.delete(rule);\r\n    this.removeButtonContextCache.delete(rule);\r\n\r\n    this.handleTouched();\r\n    this.handleDataChange();\r\n  }\r\n\r\n  addRuleSet(parent?: RuleSet): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    parent = parent || this.data;\r\n    if (this.config.addRuleSet) {\r\n      this.config.addRuleSet(parent);\r\n    } else {\r\n      parent.rules = parent.rules.concat([{ condition: 'and', rules: [] }]);\r\n    }\r\n\r\n    this.handleTouched();\r\n    this.handleDataChange();\r\n  }\r\n\r\n  removeRuleSet(ruleset?: RuleSet, parent?: RuleSet): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    ruleset = ruleset || this.data;\r\n    parent = parent || this.parentValue;\r\n    if (this.config.removeRuleSet) {\r\n      this.config.removeRuleSet(ruleset, parent);\r\n    } else {\r\n      parent.rules = parent.rules.filter((r) => r !== ruleset);\r\n    }\r\n\r\n    this.handleTouched();\r\n    this.handleDataChange();\r\n  }\r\n\r\n  transitionEnd(e: Event): void {\r\n    this.treeContainer.nativeElement.style.maxHeight = null;\r\n  }\r\n\r\n  toggleCollapse(): void {\r\n    this.computedTreeContainerHeight();\r\n    setTimeout(() => {\r\n      this.data.collapsed = !this.data.collapsed;\r\n    }, 100);\r\n  }\r\n\r\n  computedTreeContainerHeight(): void {\r\n    const nativeElement: HTMLElement = this.treeContainer.nativeElement;\r\n    if (nativeElement && nativeElement.firstElementChild) {\r\n      nativeElement.style.maxHeight = (nativeElement.firstElementChild.clientHeight + 8) + 'px';\r\n    }\r\n  }\r\n\r\n  changeCondition(value: string): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.data.condition = value;\r\n    this.handleTouched();\r\n    this.handleDataChange();\r\n  }\r\n\r\n  changeOperator(rule: Rule): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.config.coerceValueForOperator) {\r\n      rule.value = this.config.coerceValueForOperator(rule.operator, rule.value, rule);\r\n    } else {\r\n      rule.value = this.coerceValueForOperator(rule.operator, rule.value, rule);\r\n    }\r\n\r\n    this.handleTouched();\r\n    this.handleDataChange();\r\n  }\r\n\r\n  coerceValueForOperator(operator: string, value: any, rule: Rule): any {\r\n    const inputType: string = this.getInputType(rule.field, operator);\r\n    if (inputType === 'multiselect' && !Array.isArray(value)) {\r\n      return [value];\r\n    }\r\n    return value;\r\n  }\r\n\r\n  changeInput(): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.handleTouched();\r\n    this.handleDataChange();\r\n  }\r\n\r\n  changeField(fieldValue: string, rule: Rule): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    const inputContext = this.inputContextCache.get(rule);\r\n    const currentField = inputContext && inputContext.field;\r\n\r\n    const nextField: Field = this.config.fields[fieldValue];\r\n\r\n    const nextValue = this.calculateFieldChangeValue(\r\n      currentField, nextField, rule.value);\r\n\r\n    if (nextValue !== undefined) {\r\n      rule.value = nextValue;\r\n    } else {\r\n      delete rule.value;\r\n    }\r\n\r\n    rule.operator = this.getDefaultOperator(nextField);\r\n\r\n    // Create new context objects so templates will automatically update\r\n    this.inputContextCache.delete(rule);\r\n    this.operatorContextCache.delete(rule);\r\n    this.fieldContextCache.delete(rule);\r\n    this.entityContextCache.delete(rule);\r\n    this.getInputContext(rule);\r\n    this.getFieldContext(rule);\r\n    this.getOperatorContext(rule);\r\n    this.getEntityContext(rule);\r\n\r\n    this.handleTouched();\r\n    this.handleDataChange();\r\n  }\r\n\r\n  changeEntity(entityValue: string, rule: Rule, index: number, data: RuleSet): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    let i = index;\r\n    let rs = data;\r\n    const entity: Entity = this.entities.find((e) => e.value === entityValue);\r\n    const defaultField: Field = this.getDefaultField(entity);\r\n    if (!rs) {\r\n      rs = this.data;\r\n      i = rs.rules.findIndex((x) => x === rule);\r\n    }\r\n    rule.field = defaultField.value;\r\n    rs.rules[i] = rule;\r\n    if (defaultField) {\r\n      this.changeField(defaultField.value, rule);\r\n    } else {\r\n      this.handleTouched();\r\n      this.handleDataChange();\r\n    }\r\n  }\r\n\r\n  getDefaultValue(defaultValue: any): any {\r\n    switch (typeof defaultValue) {\r\n      case 'function':\r\n        return defaultValue();\r\n      default:\r\n        return defaultValue;\r\n    }\r\n  }\r\n\r\n  getOperatorTemplate(): TemplateRef<any> {\r\n    const t = this.parentOperatorTemplate || this.operatorTemplate;\r\n    return t ? t.template : null;\r\n  }\r\n\r\n  getFieldTemplate(): TemplateRef<any> {\r\n    const t = this.parentFieldTemplate || this.fieldTemplate;\r\n    return t ? t.template : null;\r\n  }\r\n\r\n  getEntityTemplate(): TemplateRef<any> {\r\n    const t = this.parentEntityTemplate || this.entityTemplate;\r\n    return t ? t.template : null;\r\n  }\r\n\r\n  getArrowIconTemplate(): TemplateRef<any> {\r\n    const t = this.parentArrowIconTemplate || this.arrowIconTemplate;\r\n    return t ? t.template : null;\r\n  }\r\n\r\n  getButtonGroupTemplate(): TemplateRef<any> {\r\n    const t = this.parentButtonGroupTemplate || this.buttonGroupTemplate;\r\n    return t ? t.template : null;\r\n  }\r\n\r\n  getSwitchGroupTemplate(): TemplateRef<any> {\r\n    const t = this.parentSwitchGroupTemplate || this.switchGroupTemplate;\r\n    return t ? t.template : null;\r\n  }\r\n\r\n  getRemoveButtonTemplate(): TemplateRef<any> {\r\n    const t = this.parentRemoveButtonTemplate || this.removeButtonTemplate;\r\n    return t ? t.template : null;\r\n  }\r\n\r\n  getEmptyWarningTemplate(): TemplateRef<any> {\r\n    const t = this.parentEmptyWarningTemplate || this.emptyWarningTemplate;\r\n    return t ? t.template : null;\r\n  }\r\n\r\n  getQueryItemClassName(local: LocalRuleMeta): string {\r\n    let cls = this.getClassNames('row', 'connector', 'transition');\r\n    cls += ' ' + this.getClassNames(local.ruleset ? 'ruleSet' : 'rule');\r\n    if (local.invalid) {\r\n      cls += ' ' + this.getClassNames('invalidRuleSet');\r\n    }\r\n    return cls;\r\n  }\r\n\r\n  getButtonGroupContext(): ButtonGroupContext {\r\n    if (!this.buttonGroupContext) {\r\n      this.buttonGroupContext = {\r\n        addRule: this.addRule.bind(this),\r\n        addRuleSet: this.allowRuleset && this.addRuleSet.bind(this),\r\n        removeRuleSet: this.allowRuleset && this.parentValue && this.removeRuleSet.bind(this),\r\n        getDisabledState: this.getDisabledState,\r\n        $implicit: this.data\r\n      };\r\n    }\r\n    return this.buttonGroupContext;\r\n  }\r\n\r\n  getRemoveButtonContext(rule: Rule): RemoveButtonContext {\r\n    if (!this.removeButtonContextCache.has(rule)) {\r\n      this.removeButtonContextCache.set(rule, {\r\n        removeRule: this.removeRule.bind(this),\r\n        getDisabledState: this.getDisabledState,\r\n        $implicit: rule\r\n      });\r\n    }\r\n    return this.removeButtonContextCache.get(rule);\r\n  }\r\n\r\n  getFieldContext(rule: Rule): FieldContext {\r\n    if (!this.fieldContextCache.has(rule)) {\r\n      this.fieldContextCache.set(rule, {\r\n        onChange: this.changeField.bind(this),\r\n        getFields: this.getFields.bind(this),\r\n        getDisabledState: this.getDisabledState,\r\n        fields: this.fields,\r\n        $implicit: rule\r\n      });\r\n    }\r\n    return this.fieldContextCache.get(rule);\r\n  }\r\n\r\n  getEntityContext(rule: Rule): EntityContext {\r\n    if (!this.entityContextCache.has(rule)) {\r\n      this.entityContextCache.set(rule, {\r\n        onChange: this.changeEntity.bind(this),\r\n        getDisabledState: this.getDisabledState,\r\n        entities: this.entities,\r\n        $implicit: rule\r\n      });\r\n    }\r\n    return this.entityContextCache.get(rule);\r\n  }\r\n\r\n  getSwitchGroupContext(): SwitchGroupContext {\r\n    return {\r\n      onChange: this.changeCondition.bind(this),\r\n      getDisabledState: this.getDisabledState,\r\n      $implicit: this.data\r\n    };\r\n  }\r\n\r\n  getArrowIconContext(): ArrowIconContext {\r\n    return {\r\n      getDisabledState: this.getDisabledState,\r\n      $implicit: this.data\r\n    };\r\n  }\r\n\r\n  getEmptyWarningContext(): EmptyWarningContext {\r\n    return {\r\n      getDisabledState: this.getDisabledState,\r\n      message: this.emptyMessage,\r\n      $implicit: this.data\r\n    };\r\n  }\r\n\r\n  getOperatorContext(rule: Rule): OperatorContext {\r\n    if (!this.operatorContextCache.has(rule)) {\r\n      this.operatorContextCache.set(rule, {\r\n        onChange: this.changeOperator.bind(this),\r\n        getDisabledState: this.getDisabledState,\r\n        operators: this.getOperators(rule.field),\r\n        $implicit: rule\r\n      });\r\n    }\r\n    return this.operatorContextCache.get(rule);\r\n  }\r\n\r\n  getInputContext(rule: Rule): InputContext {\r\n    if (!this.inputContextCache.has(rule)) {\r\n      this.inputContextCache.set(rule, {\r\n        onChange: this.changeInput.bind(this),\r\n        getDisabledState: this.getDisabledState,\r\n        options: this.getOptions(rule.field),\r\n        field: this.config.fields[rule.field],\r\n        $implicit: rule\r\n      });\r\n    }\r\n    return this.inputContextCache.get(rule);\r\n  }\r\n\r\n  private calculateFieldChangeValue(\r\n    currentField: Field,\r\n    nextField: Field,\r\n    currentValue: any\r\n  ): any {\r\n\r\n    if (this.config.calculateFieldChangeValue != null) {\r\n      return this.config.calculateFieldChangeValue(\r\n        currentField, nextField, currentValue);\r\n    }\r\n\r\n    const canKeepValue = () => {\r\n      if (currentField == null || nextField == null) {\r\n        return false;\r\n      }\r\n      return currentField.type === nextField.type\r\n        && this.defaultPersistValueTypes.indexOf(currentField.type) !== -1;\r\n    };\r\n\r\n    if (this.persistValueOnFieldChange && canKeepValue()) {\r\n      return currentValue;\r\n    }\r\n\r\n    if (nextField && nextField.defaultValue !== undefined) {\r\n      return this.getDefaultValue(nextField.defaultValue);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private checkEmptyRuleInRuleset(ruleset: RuleSet): boolean {\r\n    if (!ruleset || !ruleset.rules || ruleset.rules.length === 0) {\r\n      return true;\r\n    } else {\r\n      return ruleset.rules.some((item: RuleSet) => {\r\n        if (item.rules) {\r\n          return this.checkEmptyRuleInRuleset(item);\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private validateRulesInRuleset(ruleset: RuleSet, errorStore: any[]) {\r\n    if (ruleset && ruleset.rules && ruleset.rules.length > 0) {\r\n      ruleset.rules.forEach((item) => {\r\n        if ((item as RuleSet).rules) {\r\n          return this.validateRulesInRuleset(item as RuleSet, errorStore);\r\n        } else if ((item as Rule).field) {\r\n          const field = this.config.fields[(item as Rule).field];\r\n          if (field && field.validator && field.validator.apply) {\r\n            const error = field.validator(item as Rule, ruleset);\r\n            if (error != null) {\r\n              errorStore.push(error);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private handleDataChange(): void {\r\n    this.changeDetectorRef.markForCheck();\r\n    if (this.onChangeCallback) {\r\n      this.onChangeCallback();\r\n    }\r\n    if (this.parentChangeCallback) {\r\n      this.parentChangeCallback();\r\n    }\r\n  }\r\n\r\n  private handleTouched(): void {\r\n    if (this.onTouchedCallback) {\r\n      this.onTouchedCallback();\r\n    }\r\n    if (this.parentTouchedCallback) {\r\n      this.parentTouchedCallback();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, } from '@angular/forms';\r\n\r\nimport { QueryBuilderComponent } from './query-builder/query-builder.component';\r\n\r\nimport { QueryArrowIconDirective } from './query-builder/query-arrow-icon.directive';\r\nimport { QueryFieldDirective } from './query-builder/query-field.directive';\r\nimport { QueryInputDirective } from './query-builder/query-input.directive';\r\nimport { QueryEntityDirective } from './query-builder/query-entity.directive';\r\nimport { QueryOperatorDirective } from './query-builder/query-operator.directive';\r\nimport { QueryButtonGroupDirective } from './query-builder/query-button-group.directive';\r\nimport { QuerySwitchGroupDirective } from './query-builder/query-switch-group.directive';\r\nimport { QueryRemoveButtonDirective } from './query-builder/query-remove-button.directive';\r\nimport { QueryEmptyWarningDirective } from './query-builder/query-empty-warning.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    QueryBuilderComponent,\r\n    QueryInputDirective,\r\n    QueryOperatorDirective,\r\n    QueryFieldDirective,\r\n    QueryEntityDirective,\r\n    QueryButtonGroupDirective,\r\n    QuerySwitchGroupDirective,\r\n    QueryRemoveButtonDirective,\r\n    QueryEmptyWarningDirective,\r\n    QueryArrowIconDirective\r\n  ],\r\n  exports: [\r\n    QueryBuilderComponent,\r\n    QueryInputDirective,\r\n    QueryOperatorDirective,\r\n    QueryFieldDirective,\r\n    QueryEntityDirective,\r\n    QueryButtonGroupDirective,\r\n    QuerySwitchGroupDirective,\r\n    QueryRemoveButtonDirective,\r\n    QueryEmptyWarningDirective,\r\n    QueryArrowIconDirective\r\n  ]\r\n})\r\nexport class QueryBuilderModule { }\r\n"]}